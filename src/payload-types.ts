/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    pages: Page;
    'room-rates': RoomRate;
    documents: Document;
    stories: Story;
    categories: Category;
    redirects: Redirect;
    forms: Form;
    'form-submissions': FormSubmission;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    'room-rates': RoomRatesSelect<false> | RoomRatesSelect<true>;
    documents: DocumentsSelect<false> | DocumentsSelect<true>;
    stories: StoriesSelect<false> | StoriesSelect<true>;
    categories: CategoriesSelect<false> | CategoriesSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    header: Header;
  };
  globalsSelect: {
    header: HeaderSelect<false> | HeaderSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    card?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tablet?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  hero: {
    type: 'imageHero' | 'videoHero';
    media: number | Media;
    richText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    links?:
      | {
          link: {
            type?: ('reference' | 'custom') | null;
            newTab?: boolean | null;
            reference?: {
              relationTo: 'pages';
              value: number | Page;
            } | null;
            url?: string | null;
            label: string;
            /**
             * Choose how the link should be rendered.
             */
            appearance?: ('default' | 'outline') | null;
          };
          id?: string | null;
        }[]
      | null;
  };
  layout?:
    | (
        | MediaBlock
        | QuoteBlock
        | ImageContentBlock
        | ColumnsBlock
        | MapBlock
        | GalleryBlock
        | ParallaxBlock
        | RoomRatesBlock
        | Footer
        | CollapsibleBlock
        | StoriesBlock
        | LiveCamBlock
        | FormBlock
      )[]
    | null;
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: number | Media;
  backgroundColor?: ('lightGold' | 'charcoal') | null;
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Add menu icons that link to sections on the page
   */
  menuItems?:
    | {
        /**
         * Upload an icon (SVG, PNG, or JPEG recommended)
         */
        icon: number | Media;
        /**
         * Display name for the menu item
         */
        name: string;
        /**
         * ID of the section to scroll to (e.g., "restaurant-section")
         */
        anchorId: string;
        id?: string | null;
      }[]
    | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: number | Page;
          } | null;
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "QuoteBlock".
 */
export interface QuoteBlock {
  media?: (number | null) | Media;
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'quoteBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageContentBlock".
 */
export interface ImageContentBlock {
  /**
   * Optional ID for navigation links (e.g., "accommodation-section")
   */
  anchorId?: string | null;
  media: number | Media;
  imagePosition: 'left' | 'right';
  backgroundColor?: ('lightGold' | 'charcoal' | 'white' | 'gold-dark' | 'gold-darker' | 'gold-darkest' | 'auto') | null;
  /**
   * Add multiple content sections with individual styling
   */
  contentSections: {
    sectionType: 'richText' | 'horizontalLine';
    richText?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    /**
     * Color for this text section
     */
    textColor?: ('dark' | 'light' | 'gold' | 'gold-dark' | 'gold-darker' | 'gold-darkest' | 'auto') | null;
    lineColor?: ('gold' | 'gold-dark' | 'gold-darker' | 'gold-darkest' | 'charcoal' | 'white' | 'lightGold') | null;
    lineWidth?: ('short' | 'medium' | 'long' | 'full') | null;
    /**
     * Vertical spacing around this section
     */
    spacing?: ('small' | 'medium' | 'large') | null;
    id?: string | null;
  }[];
  /**
   * Automatically add horizontal lines between content sections
   */
  showSeparatorLines?: boolean | null;
  /**
   * Style of the separator lines between sections
   */
  separatorStyle?: ('solid' | 'dashed' | 'dotted') | null;
  /**
   * Color of the separator lines between sections
   */
  separatorColor?:
    | ('gold' | 'gold-dark' | 'gold-darker' | 'gold-darkest' | 'lightGray' | 'darkGray' | 'charcoal' | 'white' | 'auto')
    | null;
  /**
   * Width of the separator lines between sections
   */
  separatorWidth?: ('short' | 'medium' | 'long' | 'full') | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: number | Page;
          } | null;
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'imageContentBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ColumnsBlock".
 */
export interface ColumnsBlock {
  /**
   * Optional ID for navigation links (e.g., "location-section")
   */
  anchorId?: string | null;
  columnCount: '1' | '2' | '3' | '4';
  /**
   * Optional title or introductory text displayed above the columns
   */
  headerContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  backgroundColor?: ('lightGold' | 'charcoal' | 'white') | null;
  backgroundImage?: (number | null) | Media;
  columns: {
    content?: {
      root: {
        type: string;
        children: {
          type: string;
          version: number;
          [k: string]: unknown;
        }[];
        direction: ('ltr' | 'rtl') | null;
        format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
        indent: number;
        version: number;
      };
      [k: string]: unknown;
    } | null;
    id?: string | null;
  }[];
  spacing?: ('small' | 'medium' | 'large') | null;
  /**
   * How columns should be ordered when stacked vertically on mobile devices
   */
  stackOrder?: ('normal' | 'reverse' | 'alternate') | null;
  /**
   * How columns should be aligned vertically on desktop
   */
  verticalAlignment?: ('top' | 'center' | 'bottom' | 'stretch') | null;
  /**
   * Screen size below which columns will stack vertically
   */
  stackBreakpoint?: ('sm' | 'md' | 'lg') | null;
  /**
   * Display separator lines between columns
   */
  showBorders?: boolean | null;
  /**
   * Style of the border lines between columns
   */
  borderStyle?: ('solid' | 'dashed' | 'dotted') | null;
  /**
   * Color of the border lines between columns
   */
  borderColor?: ('gold' | 'lightGray' | 'darkGray' | 'charcoal' | 'white') | null;
  /**
   * Where to display the border lines
   */
  borderPosition?: ('vertical' | 'horizontal' | 'both') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'columnsBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MapBlock".
 */
export interface MapBlock {
  /**
   * Optional ID for navigation links (e.g., "location-section")
   */
  anchorId?: string | null;
  title?: string | null;
  mapType: 'google' | 'embed';
  latitude?: number | null;
  longitude?: number | null;
  /**
   * Used for Google Maps search if coordinates are not provided
   */
  address?: string | null;
  /**
   * Full embed URL for custom maps (Google Maps, OpenStreetMap, etc.)
   */
  embedUrl?: string | null;
  /**
   * Zoom level (1-20, higher = more zoomed in)
   */
  zoomLevel?: number | null;
  mapMode?: ('roadmap' | 'satellite' | 'hybrid' | 'terrain') | null;
  height?: ('small' | 'medium' | 'large' | 'xl') | null;
  showControls?: boolean | null;
  allowFullscreen?: boolean | null;
  borderRadius?: ('none' | 'small' | 'medium' | 'large') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mapBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GalleryBlock".
 */
export interface GalleryBlock {
  /**
   * Optional ID for navigation links (e.g., "gallery-section")
   */
  anchorId?: string | null;
  title?: string | null;
  description?: string | null;
  images: {
    image: number | Media;
    caption?: string | null;
    /**
     * Alternative text for accessibility
     */
    alt?: string | null;
    id?: string | null;
  }[];
  layout?: ('2' | '3' | '4' | '5') | null;
  aspectRatio?: ('square' | 'landscape' | 'portrait' | 'wide' | 'auto') | null;
  spacing?: ('none' | 'small' | 'medium' | 'large') | null;
  /**
   * Allow images to open in full-screen lightbox on click
   */
  enableLightbox?: boolean | null;
  /**
   * Display image captions below each image
   */
  showCaptions?: boolean | null;
  backgroundColor?: ('white' | 'lightGold' | 'charcoal') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'galleryBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ParallaxBlock".
 */
export interface ParallaxBlock {
  /**
   * Optional ID for navigation links (e.g., "parallax-section")
   */
  anchorId?: string | null;
  /**
   * High resolution image for best parallax effect
   */
  backgroundImage: number | Media;
  height?: ('small' | 'medium' | 'large' | 'xl') | null;
  /**
   * How fast the background moves relative to scroll
   */
  parallaxSpeed?: ('slow' | 'medium' | 'fast' | 'none') | null;
  /**
   * Dark overlay to improve text readability
   */
  overlay?: ('none' | 'light' | 'medium' | 'dark') | null;
  /**
   * Optional text content displayed over the parallax background
   */
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  textAlignment?: ('left' | 'center' | 'right') | null;
  textColor?: ('white' | 'black' | 'gold') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'parallaxBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "RoomRatesBlock".
 */
export interface RoomRatesBlock {
  /**
   * Optional ID for navigation links (e.g., "rates-section")
   */
  anchorId?: string | null;
  /**
   * Select the room rates data to display
   */
  roomRates: number | RoomRate;
  id?: string | null;
  blockName?: string | null;
  blockType: 'room-rates-block';
}
/**
 * Manage room rates and seasonal information. You can either fill the form manually or upload a JSON file.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "room-rates".
 */
export interface RoomRate {
  id: number;
  /**
   * Year for these rates (e.g., 2025)
   */
  year: number;
  /**
   * Optional: Upload your rates data as a JSON object. This will override any manually entered data.
   */
  jsonUpload?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Define the date ranges for each season
   */
  seasons: {
    /**
     * Peak season date range
     */
    peak: string;
    /**
     * High season date range
     */
    high: string;
    /**
     * Mid season date range
     */
    mid: string;
    /**
     * Low season date range
     */
    low: string;
  };
  /**
   * Configure different room types and their rates
   */
  rates: {
    /**
     * Name of the room type (e.g., Savannah Room)
     */
    room_type: string;
    /**
     * Total number of rooms of this type
     */
    total: number;
    /**
     * Size of the room (e.g., 46 sq/m)
     */
    size: string;
    /**
     * Available bed configurations
     */
    bed_options: string;
    /**
     * Key features and amenities of the room
     */
    features: string;
    /**
     * Additional information about the room (e.g., interconnecting rooms, ADA accessibility)
     */
    additional?: string | null;
    /**
     * Maximum room occupancy details
     */
    occupancy: string;
    /**
     * Different rate packages available for this room type
     */
    rate_types: {
      rate_type: 'Full Board' | 'Game Package';
      /**
       * Rates for different room configurations
       */
      rooms: {
        room: 'Single' | 'Double' | 'Triple' | 'Per Room';
        /**
         * Low season rate
         */
        low: number;
        /**
         * Mid season rate
         */
        mid: number;
        /**
         * High season rate
         */
        high: number;
        /**
         * Peak season rate
         */
        peak: number;
        id?: string | null;
      }[];
      id?: string | null;
    }[];
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Footer".
 */
export interface Footer {
  mainLogo: number | Media;
  backgroundImage?: (number | null) | Media;
  phoneNumbers: {
    phoneNumber?: string | null;
    id?: string | null;
  }[];
  email: string;
  otherLogos?:
    | {
        logo?: (number | null) | Media;
        id?: string | null;
      }[]
    | null;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'footer';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CollapsibleBlock".
 */
export interface CollapsibleBlock {
  /**
   * Optional ID for navigation links (e.g., "rates-section")
   */
  anchorId?: string | null;
  /**
   * Heading of the collapsible block
   */
  heading: string;
  items?:
    | {
        /**
         * Title of the collapsible block
         */
        title: string;
        /**
         * Content of the collapsible block
         */
        content: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'collapsibleBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "StoriesBlock".
 */
export interface StoriesBlock {
  stories?: (number | Story)[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'storiesBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "stories".
 */
export interface Story {
  id: number;
  title: string;
  heroImage?: (number | null) | Media;
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  relatedPosts?: (number | Story)[] | null;
  categories?: (number | Category)[] | null;
  meta?: {
    title?: string | null;
    /**
     * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
     */
    image?: (number | null) | Media;
    description?: string | null;
  };
  publishedAt?: string | null;
  authors?: (number | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        name?: string | null;
      }[]
    | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: number;
  title: string;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (number | null) | Category;
  breadcrumbs?:
    | {
        doc?: (number | null) | Category;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LiveCamBlock".
 */
export interface LiveCamBlock {
  anchorId?: string | null;
  liveCamGallery?:
    | {
        thumbnail: number | Media;
        links?:
          | {
              link: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?: {
                  relationTo: 'pages';
                  value: number | Page;
                } | null;
                url?: string | null;
                label: string;
                /**
                 * Choose how the link should be rendered.
                 */
                appearance?: ('default' | 'outline') | null;
              };
              id?: string | null;
            }[]
          | null;
        title: string;
        description?: string | null;
        isActive?: boolean | null;
        updatedAt?: string | null;
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'liveCam';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: number | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            placeholder?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents".
 */
export interface Document {
  id: number;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: number;
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?: {
      relationTo: 'pages';
      value: number | Page;
    } | null;
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'room-rates';
        value: number | RoomRate;
      } | null)
    | ({
        relationTo: 'documents';
        value: number | Document;
      } | null)
    | ({
        relationTo: 'stories';
        value: number | Story;
      } | null)
    | ({
        relationTo: 'categories';
        value: number | Category;
      } | null)
    | ({
        relationTo: 'redirects';
        value: number | Redirect;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        card?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tablet?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  hero?:
    | T
    | {
        type?: T;
        media?: T;
        richText?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              id?: T;
            };
      };
  layout?:
    | T
    | {
        mediaBlock?: T | MediaBlockSelect<T>;
        quoteBlock?: T | QuoteBlockSelect<T>;
        imageContentBlock?: T | ImageContentBlockSelect<T>;
        columnsBlock?: T | ColumnsBlockSelect<T>;
        mapBlock?: T | MapBlockSelect<T>;
        galleryBlock?: T | GalleryBlockSelect<T>;
        parallaxBlock?: T | ParallaxBlockSelect<T>;
        'room-rates-block'?: T | RoomRatesBlockSelect<T>;
        footer?: T | FooterSelect<T>;
        collapsibleBlock?: T | CollapsibleBlockSelect<T>;
        storiesBlock?: T | StoriesBlockSelect<T>;
        liveCam?: T | LiveCamBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  backgroundColor?: T;
  richText?: T;
  menuItems?:
    | T
    | {
        icon?: T;
        name?: T;
        anchorId?: T;
        id?: T;
      };
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "QuoteBlock_select".
 */
export interface QuoteBlockSelect<T extends boolean = true> {
  media?: T;
  richText?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ImageContentBlock_select".
 */
export interface ImageContentBlockSelect<T extends boolean = true> {
  anchorId?: T;
  media?: T;
  imagePosition?: T;
  backgroundColor?: T;
  contentSections?:
    | T
    | {
        sectionType?: T;
        richText?: T;
        textColor?: T;
        lineColor?: T;
        lineWidth?: T;
        spacing?: T;
        id?: T;
      };
  showSeparatorLines?: T;
  separatorStyle?: T;
  separatorColor?: T;
  separatorWidth?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ColumnsBlock_select".
 */
export interface ColumnsBlockSelect<T extends boolean = true> {
  anchorId?: T;
  columnCount?: T;
  headerContent?: T;
  backgroundColor?: T;
  backgroundImage?: T;
  columns?:
    | T
    | {
        content?: T;
        id?: T;
      };
  spacing?: T;
  stackOrder?: T;
  verticalAlignment?: T;
  stackBreakpoint?: T;
  showBorders?: T;
  borderStyle?: T;
  borderColor?: T;
  borderPosition?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MapBlock_select".
 */
export interface MapBlockSelect<T extends boolean = true> {
  anchorId?: T;
  title?: T;
  mapType?: T;
  latitude?: T;
  longitude?: T;
  address?: T;
  embedUrl?: T;
  zoomLevel?: T;
  mapMode?: T;
  height?: T;
  showControls?: T;
  allowFullscreen?: T;
  borderRadius?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "GalleryBlock_select".
 */
export interface GalleryBlockSelect<T extends boolean = true> {
  anchorId?: T;
  title?: T;
  description?: T;
  images?:
    | T
    | {
        image?: T;
        caption?: T;
        alt?: T;
        id?: T;
      };
  layout?: T;
  aspectRatio?: T;
  spacing?: T;
  enableLightbox?: T;
  showCaptions?: T;
  backgroundColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ParallaxBlock_select".
 */
export interface ParallaxBlockSelect<T extends boolean = true> {
  anchorId?: T;
  backgroundImage?: T;
  height?: T;
  parallaxSpeed?: T;
  overlay?: T;
  content?: T;
  textAlignment?: T;
  textColor?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "RoomRatesBlock_select".
 */
export interface RoomRatesBlockSelect<T extends boolean = true> {
  anchorId?: T;
  roomRates?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "Footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  mainLogo?: T;
  backgroundImage?: T;
  phoneNumbers?:
    | T
    | {
        phoneNumber?: T;
        id?: T;
      };
  email?: T;
  otherLogos?:
    | T
    | {
        logo?: T;
        id?: T;
      };
  content?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CollapsibleBlock_select".
 */
export interface CollapsibleBlockSelect<T extends boolean = true> {
  anchorId?: T;
  heading?: T;
  items?:
    | T
    | {
        title?: T;
        content?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "StoriesBlock_select".
 */
export interface StoriesBlockSelect<T extends boolean = true> {
  stories?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "LiveCamBlock_select".
 */
export interface LiveCamBlockSelect<T extends boolean = true> {
  anchorId?: T;
  liveCamGallery?:
    | T
    | {
        thumbnail?: T;
        links?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                    appearance?: T;
                  };
              id?: T;
            };
        title?: T;
        description?: T;
        isActive?: T;
        updatedAt?: T;
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "room-rates_select".
 */
export interface RoomRatesSelect<T extends boolean = true> {
  year?: T;
  jsonUpload?: T;
  seasons?:
    | T
    | {
        peak?: T;
        high?: T;
        mid?: T;
        low?: T;
      };
  rates?:
    | T
    | {
        room_type?: T;
        total?: T;
        size?: T;
        bed_options?: T;
        features?: T;
        additional?: T;
        occupancy?: T;
        rate_types?:
          | T
          | {
              rate_type?: T;
              rooms?:
                | T
                | {
                    room?: T;
                    low?: T;
                    mid?: T;
                    high?: T;
                    peak?: T;
                    id?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents_select".
 */
export interface DocumentsSelect<T extends boolean = true> {
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "stories_select".
 */
export interface StoriesSelect<T extends boolean = true> {
  title?: T;
  heroImage?: T;
  content?: T;
  relatedPosts?: T;
  categories?: T;
  meta?:
    | T
    | {
        title?: T;
        image?: T;
        description?: T;
      };
  publishedAt?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        name?: T;
      };
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories_select".
 */
export interface CategoriesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              placeholder?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: number;
  logo: number | Media;
  email?: string | null;
  navItems?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: number | Page;
          } | null;
          url?: string | null;
          label: string;
        };
        id?: string | null;
      }[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header_select".
 */
export interface HeaderSelect<T extends boolean = true> {
  logo?: T;
  email?: T;
  navItems?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'stories';
          value: number | Story;
        } | null);
    global?: string | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}